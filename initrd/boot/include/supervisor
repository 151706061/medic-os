#!/bin/sh

supervise_dir="/srv/storage/system/supervisor"

_supervisor_process()
{
  local package="$1"
  local service="$2"

  local pkg_supervise_dir="$supervise_dir/$package"
  local log="$pkg_supervise_dir/logs/$service.log"

  trap 'supervisor_resync_service "$package" "$service"' HUP
  trap '_supervisor_termination_trap "$package" "$service"' TERM

  while true; do

    rm -f "$pkg_supervise_dir/status/$package.pid" &&
    mkdir -p "$pkg_supervise_dir/status" "$pkg_supervise_dir/logs"

    # Is service down?
    #   If so, block on the FIFO; a write is our signal to resume.
    
    local svc_down_fifo="$pkg_supervise_dir/status/$service.down"
    
    if [ -p "$svc_down_fifo" ]; then
      read < "$svc_down_fifo" &>/dev/null
      rm -f "$svc_down_fifo"
    fi
    
    # Fork-and-exec:
    #  This attempts to start the supervised process.
        
    (exec "/srv/scripts/$package/run/$service" >> "$log" 2>&1) &

    local pid="$!"
    local pid_file="$pkg_supervise_dir/status/$service.pid"
    
    echo "$pid" > "$pid_file" &&
    wait "$pid" &&
    rm -f "$pid_file"

    local status="$?"
    
    if [ "$status" -eq 0 ]; then
      echo "`date`: Service '$service' in package '$package'" \
        "exited normally (pid was '$pid')" >> "$log"
    else
      echo "`date`: Service '$service' in package '$package'" \
        "exited with non-zero status $status (pid was '$pid')" >> "$log"
      sleep 5
    fi

    echo "`date`: Restarting service '$service' in '$package'" >> "$log"
  done
}

supervisor_resync_service()
{
  local package="$1"
  local service="$2"

  local pkg_supervise_dir="$supervise_dir/$package"
  local svc_down_fifo="$pkg_supervise_dir/status/$service.down"

  if supervisor_is_service_running "$package" "$service"; then
    if [ -p "$svc_down_fifo" ]; then
      supervisor_terminate_service "$package" "$service"
    fi
  fi
  
  return 0
}

_supervisor_termination_trap()
{
  local package="$1"
  local service="$2"

  supervisor_terminate_service "$package" "$service"
  exit 111
}
  
supervisor_terminate_service()
{
  local package="$1"
  local service="$2"

  local pkg_supervise_dir="$supervise_dir/$package"
  local pid="`cat "$pkg_supervise_dir/status/$service.pid" 2>/dev/null`"
  
  rm -f "$pkg_supervise_dir/status/$service.pid" &&
  kill -TERM "$pid" 2>/dev/null
}

_start_supervisor_process()
{
  local package="$1"
  local service="$2"

  local ppid_dir="$supervise_dir/$package/status"
  local ppid_file="$ppid_dir/$service.ppid"

  if supervisor_is_service_watched "$package" "$service"; then
    return 1
  fi
    
  trap '_terminate_supervisor_process "$package" "$service"' TERM

  _supervisor_process "$package" "$service" &>/dev/null &

  local pid="$!"
  mkdir -p "$ppid_dir" &&
  echo "$pid" > "$ppid_file"
  
  return "$?"
}

_terminate_supervisor_process()
{
  local package="$1"
  local service="$2"
  
  local ppid_file="$supervise_dir/$package/status/$service.ppid"
  
  if ! supervisor_is_service_watched "$package" "$service"; then
    return 1
  fi
  
  local ppid="`cat "$ppid_file" 2>/dev/null`" &&
  rm -f "$ppid_file" &&
  kill -TERM "$ppid" 2>/dev/null
  
  return "$?"
}

_pidfile_has_active_process()
{
  local pid_file="$1"

  if ! [ -f "$pid_file" ]; then
    return 1
  fi

  local pid="`cat "$pid_file" 2>/dev/null`"

  if ! [ -d "/proc/$pid" ]; then
    return 2
  fi

  return 0
}

supervisor_start()
{
  local package="$1"
  local rv='0'

  for service in "/srv/scripts/$package/run"/*; do
  
    if [ "$service" != '*' -a -x "$service" ]; then
      service="`basename "$service"`"
      _start_supervisor_process "$package" "$service"
      
      if [ "$?" -ne 0 ]; then
        rv="$(($rv + 1))"
        warn "Failed to start supervisor for '$package/$service'"
      fi
    fi
  done

  return "$rv"
}

supervisor_stop()
{
  local package="$1"
  local rv='0'
  
  for service in "/srv/scripts/$package/run"/*; do
  
    if [ "$service" != '*' -a -x "$service" ]; then
      service="`basename "$service"`"
      _terminate_supervisor_process "$package" "$service"
      
      if [ "$?" -ne 0 ]; then
        rv="$(($rv + 1))"
        warn "Failed to stop '$package/$service'"
      fi
    fi
  done
  
  return "$rv"
}

supervisor_service_down()
{
  local package="$1"
  local service="$2"

  local pkg_supervise_dir="$supervise_dir/$package"
  local svc_down_fifo="$pkg_supervise_dir/status/$service.down"
  
  if ! supervisor_is_service_watched "$package" "$service"; then
    return 1 # Supervisor not running
  fi
  
  if [ -p "$svc_down_fifo" ]; then
    return 2 # Already down
  fi

  local ppid="`cat "$pkg_supervise_dir/status/$service.ppid"`"
  
  rm -f "$svc_down_fifo" && mkfifo -m 0600 "$svc_down_fifo" &&
  kill -HUP "$ppid"
  
  if [ "$?" -ne 0 ]; then
    return 3 # FIFO / signal failure
  fi
    
  return 0 # Success
}

supervisor_service_up()
{
  local package="$1"
  local service="$2"

  local pkg_supervise_dir="$supervise_dir/$package"
  local svc_down_fifo="$pkg_supervise_dir/status/$service.down"
  
  if ! supervisor_is_service_watched "$package" "$service"; then
    return 1 # Supervisor not running
  fi
  
  if ! [ -p "$svc_down_fifo" ]; then
    return 2 # Service is up or currently restarting
  fi
 
  # Write to the FIFO:
  #   This unblocks `_supervisor_process` and starts the service.
  
  echo '1' > "$svc_down_fifo" || return 3
  return 0
}

supervisor_list_all_packages()
{
  for package in "/srv/scripts"/*; do
    package="`basename "$package"`"
    if [ "$package" != '*' -a "$package" != 'system' ]; then
      echo "$package"
    fi
  done
  
  return 0
}

supervisor_list_all_services()
{
  local package="$1"

  for service in "/srv/scripts/$package/run"/*; do
    service="`basename "$service"`"
    if [ "$service" != '*' ]; then
      echo "$service"
    fi
  done

  return 0
}

supervisor_list_runnable_services()
{
  local package="$1"
  local pkg_supervise_dir="$supervise_dir/$package"

  for service in "/srv/scripts/$package/run"/*; do
    service="`basename "$service"`"
    if [ "$service" != '*' ]; then
      if ! [ -p "$pkg_supervise_dir/status/$service.down" ]; then
      	echo "$service"
      fi
    fi
  done

  return 0
}

supervisor_list_watched_services()
{
  local package="$1"

  # List services where supervisor is running
  for service in "$supervise_dir/$package/status"/*.ppid; do
    service="`basename "$service" .pid`"
    if [ "$service" != '*' ]; then
      echo "$service"
    fi
  done

  return 0
}

supervisor_list_running_services()
{
  local package="$1"

  # List services where intended process is running
  for service in "$supervise_dir/$package/status"/*.pid; do
    service="`basename "$service" .pid`"
    if [ "$service" != '*' ]; then
      if supervisor_is_service_running "$package" "$service"; then
      	echo "$service"
      fi
    fi
  done

  return 0
}

supervisor_is_service_watched()
{
  local package="$1"
  local service="$2"

  _pidfile_has_active_process "$supervise_dir/$package/status/$service.ppid"
}

supervisor_is_service_running()
{
  local package="$1"
  local service="$2"

  _pidfile_has_active_process "$supervise_dir/$package/status/$service.pid"
}


