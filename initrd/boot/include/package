#!/bin/sh

set -o pipefail

extract_package_metadata()
{
  local path="$1"
  local metadata_key="$2"

  if ! [ -r "$path" ]; then
    return 1
  fi

  ar -p "$path" "$metadata_key" 2>/dev/null
  return "$?"
}

extract_package_name()
{
  local path="$1"

  extract_package_metadata "$path" 'name'
  return "$?"
}

extract_package_version()
{
  local path="$1"

  extract_package_metadata "$path" 'version'
  return "$?"
}

extract_package_digest()
{
  local path="$1"
  local digest_type="$2"

  if ! [ "$digest_type" ]; then
    digest_type='sha512'
  fi

  extract_package_metadata "$path" "digest-$digest_type"
  return "$?"
}

retrieve_installed_package_version()
{
  local package="$1"

  cat "/srv/receipts/$package/version" 2>/dev/null
  return "$?"
}

install_package()
{
  local path="$1"

  if ! [ -r "$path" ]; then
    return 1
  fi

  local package="`extract_package_name "$path"`" &&
  local version="`extract_package_version "$path"`"

  if [ "$?" -ne 0 ]; then
    return 2
  fi
 
  mkdir -p "/srv/receipts/$package" &&
    echo -n "$version" > "/srv/receipts/$package/version"

  if [ "$?" -ne 0 ]; then
    rm -f "/srv/receipts/$package/version"
    return 3
  fi

  mkdir -p "/srv/receipts/$package" "/srv/scripts/$package" &&
    (cd /srv && ar -p "$path" package.tar.xz | xz -dc \
      | tar -xvf - > "/srv/receipts/$package/manifest") && sync

  if [ "$?" -ne 0 ]; then
    rm -f "/srv/receipts/$package"
    return 4
  fi

  if [ -x "/srv/scripts/$package/install" ]; then

    "/srv/scripts/$package/install" \
      || warn "Installation script for package '$package' failed"

    sync
    
    if [ "$?" -ne 0 ]; then
      rm -rf "/srv/receipts/$package"
      return 5
    fi

  fi

  return 0
}

remove_package()
{
  local package="`basename "$1"`"

  if [ -x "/srv/scripts/$package/remove" ]; then

    supervisor_stop "$package"
    
    if [ "$?" -ne 0 ]; then
      warn "Failed to stop services for package '$package'"
      return 1
    fi
    
    "/srv/scripts/$package/remove" \
    
    if [ "$?" -ne 0 ]; then
      warn "Removal script for package '$package' failed"
      return 2
    fi

    rm -rf "/srv/receipts/$package"
  fi

  sync

  if [ "$?" -gt 0 ]; then
    return 2
  fi

  return 0
}

update_package()
{
  local path="$1"
  local force_reinstall="$2"

  local package="`extract_package_name "$path"`" &&
  local v_new="`extract_package_version "$path"`" &&
  local v_prev="`retrieve_installed_package_version "$package"`"

  if [ "$?" -ne 0 ]; then
    return 1
  fi

  if ! [ "$v_new" -gt 0 ] &>/dev/null; then
    return 2
  fi

  if [ "$v_prev" -gt 0 -a "$v_prev" -lt "$v_new" ] &>/dev/null; then
    v_prev=''
    remove_package "$package"
  fi

  if ! [ "$v_prev" -gt 0 ] &>/dev/null; then
    force_reinstall='t'
  fi

  if [ "$force_reinstall" ]; then
    install_package "$path" || return 3
  fi

  setup_package "$package"
  return 0
}

merge_package_environment()
{
  local package="$1"

  local env_file="/srv/scripts/$package/env"

  if [ -f "$env_file" ]; then
    source "$env_file"
    merge_environment /srv/software &>/dev/null
    unset merge_environment
  fi
}

setup_package()
{
  local package="`basename "$1"`"

  for script in /srv/scripts/$package/setup/*; do
    if [ -x "$script" ]; then
      "$script" \
        || warn "Setup script '$script' for package '$package' failed"
    fi
  done

  return 0
}

