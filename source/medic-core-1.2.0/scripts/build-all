#!/bin/bash

self="`readlink -f "$0"`"
base_dir="`dirname "$self"`/../"

source "$base_dir/scripts/include/logger" 3>/dev/null &&
source "$base_dir/scripts/include/builder" 2>/dev/null \
    || fatal 'Unable to load a required library'

main()
{
  local prefix="$1"
  local pkg_start="`echo "$2" | sed 's/\//-/g;'`"
  local pkg_start_version="$3"
  local pkg_stop="`echo "$4" | sed 's/\//-/g;'`"
  local pkg_stop_version="$5"
  local bits="$6"
  local parallel="$7"

  check_args "$@" || usage

  local cpu='Intel'
  local uname="`uname -s`"
  local stdarg="--prefix=\"$prefix\""

  builder_initialize &&
  builder_setup_environment "$prefix" \
    "$pkg_start" "$pkg_start_version" "$pkg_stop" \
      "$pkg_stop_version" "$uname" "$cpu" "$bits" "$parallel" &&
  \
  build_autoconf 'pv' "$stdarg" &&
  \
  (disable_parallelism && simple_cflags &&
      build_autoconf 'zlib' "--shared $stdarg") &&
  \
  builder_remove_static_libraries 'z' &&
  \
  build_autoconf 'libusb' \
    "$stdarg --enable-static=no --enable-shared=yes" &&
  \
  build_autoconf 'libusb-compat' \
    "$stdarg --enable-static=no --enable-shared=yes" &&
  \
  if [ "$build_platform" = 'linux-elf' ]; then
    build_autoconf 'usbutils' "$stdarg" &&
    \
    build_make 'usb-modeswitch' \
      'install-static' "DESTDIR=\"$prefix\" PREFIX=\"$prefix\"" 'y' &&
    \
    build_make 'usb-modeswitch-data' \
      'install' "DESTDIR=\"$prefix\" PREFIX=\"$prefix\""
  fi &&
  \
  build_autoconf 'ncurses' "$stdarg --with-shared" &&
  \
  builder_remove_static_libraries 'ncurses' 'ncurses_g' 'form' \
    'form_g' 'menu' 'menu_g' 'ncurses++' 'ncurses_g' 'panel' 'panel_g' &&
  \
  build_autoconf 'lzo' "$stdarg --enable-shared --disable-static" &&
  build_autoconf 'lrzip' "$stdarg" &&
  build_autoconf 'lzma' "$stdarg" &&
  builder_remove_static_libraries 'lzmadec' &&
  build_autoconf 'xdelta' "$stdarg" &&
  \
  build_autoconf 'diffutils' "$stdarg" &&
  build_autoconf 'patch' "$stdarg" &&
  \
  build_autoconf 'libxml2' \
    "--enable-static=no --enable-shared=yes $stdarg" &&
  \
  build_autoconf 'libxslt' \
    "--enable-static=no --enable-shared=yes \
    --with-libxml-prefix=\"$prefix\" $stdarg" &&
  \
  (disable_parallelism && \
    build_config 'openssl' "shared no-asm zlib-dynamic $stdarg") &&
  \
  build_autoconf 'openssh' \
    "$stdarg --sysconfdir=\"$prefix/etc/ssh\" \
     --with-zlib=\"$prefix\" --with-ssl-dir=\"$prefix\"" &&
  \
  builder_remove_static_libraries 'crypto' 'ssl' &&
  \
  build_autoconf 'rsync' "$stdarg" &&
  \
  build_autoconf 'libidn' "$stdarg" &&
  builder_remove_static_libraries 'idn' &&
  \
  (disable_library_path && build_autoconf 'readline' \
    "$stdarg --build=\"$build_arch\" --enable-static=no --enable-shared=yes") &&
  \
  build_autoconf 'curl' \
    "$stdarg --with-ssl=\"$prefix\" \
    --with-zlib=\"$prefix\" --with-libidn=\"$prefix\"" &&
  \
  builder_remove_static_libraries 'curl' &&
  build_autoconf 'icu' "$stdarg" &&
  \
  (simple_cflags && build_autoconf 'node' \
    "$stdarg --shared-zlib \
    --shared-zlib-includes='$prefix/include' \
    --shared-zlib-libpath='$prefix/lib' --shared-openssl \
    --shared-openssl-includes='$prefix/include' \
    --shared-openssl-libpath='$prefix/lib' --dest-cpu='$build_cpu'") &&
  \
  # For js-1.8.5 or higher:
  (disable_parallelism &&
    build_autoconf 'js' "$stdarg --host=\"$build_arch\"") &&
  \
  builder_move_libraries 'move-libraries' "$prefix" 'lib64' &&
  builder_remove_static_libraries 'js' &&
  \
  build_autoconf 'erlang' \
    "$stdarg $build_extra_options --enable-kernel-poll \
    --enable-dynamic-ssl-lib --enable-shared-zlib='$prefix' \
    --with-ssl='$prefix' --enable-m${bits}-build" &&
  \
  (disable_parallelism && \
    builder_fix_erlang_dso_linkage "$bits") &&
  \
  build_autoconf 'gammu' \
    "$stdarg --enable-shared --without-gnapplet \
     --disable-backup --without-completion --enable-protection" &&
  \
  build_autoconf 'couchdb' \
    "$stdarg --with-js-lib-name=mozjs185 \
      --with-erlang='$prefix/lib/erlang/usr/include' \
      --with-js-include='$prefix/include' --with-js-lib='$prefix/lib'" &&
  \
  build_make_install 'nodeunit' "$prefix" &&
  build_make_install 'nodelint' "$prefix" &&
  build_npm_local 'kanso' "$prefix" &&
  \
  build_ant 'ant' "$prefix" &&
  build_maven 'maven' "$prefix" &&
  build_lucene 'lucene' "$prefix" &&
  build_couchdb_lucene 'couchdb-lucene' "$prefix" &&
  \
  builder_clean_target 'clean-target' "$prefix"

  if [ "$?" -ne 0 ]; then
    fatal 'One or more build steps failed; aborting'
  fi

  return 0
}

fatal()
{
  echo "$0: fatal: $*" >&2
  exit 1
}

check_args()
{
  local prefix="$1"

  [ -d "$prefix" ] 
}

usage()
{
  echo
  echo "Usage:" >&2
  echo "  $0 root-directory" >&2
  echo

  exit 111
}

main "$@"
exit $?

