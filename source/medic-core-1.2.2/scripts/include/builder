#!/bin/bash

disable_parallelism()
{
  export MAKE="`echo "$MAKE" | sed 's/--\?j\(obs\)\? *[0-9]\+//g;'`"
}

simple_cflags()
{
  export CFLAGS="$CFLAGS_SIMPLE"
  export CXXFLAGS="$CFLAGS_SIMPLE"
}

disable_library_path()
{
  unset LD_LIBRARY_PATH
  unset DYLD_LIBRARY_PATH
}

build_version()
{
  local name="$1"
  local cut_fields="$2"

  if [ -z "$cut_fields" ]; then
    cut_fields='-9'
  fi

  readlink "$name" | cut -d- -f2- \
    | sed 's/^v//;' | cut -d. -f"$cut_fields"
}

build_autoconf()
{
  local name="$1"
  local configure_args="$2"
  local make_args="$3"
  local make_install_args="$4"

  builder_should_run "$name" || return 0

  (cd "$name" \
    && sh -c "./configure $configure_args" \
    && sh -c "$MAKE $make_args" \
    && sh -c "$MAKE install $make_install_args") 2>&1 | logger "$name"

  builder_check_status "$name" "${PIPESTATUS[0]}"
}

build_config()
{
  local name="$1"
  local config_args="$2"
  local make_args="$3"
  local make_install_args="$4"

  builder_should_run "$name" || return 0

  (cd "$name" \
    && echo "./Configure $config_args $CFLAGS $build_platform" \
    && sh -c "./Configure $config_args $CFLAGS $build_platform" \
    && sh -c "$MAKE $make_args" \
    && sh -c "$MAKE install $make_install_args") 2>&1 | logger "$name"
  
  builder_check_status "$name" "${PIPESTATUS[0]}"
}

builder_fix_erlang_dso_linkage()
{
  local bits="$1"
  local name='fix-erlang-dso-linkage'

  builder_should_run "$name" || return 0

  (cd 'erlang' && erl_top="`pwd`" &&
   for dir in wx crypto asn1 runtime_tools; do
     (cd "lib/$dir/c_src" &&
       $MAKE clean opt ERL_TOP="$erl_top" LD="gcc -m$bits")
   done && $MAKE install) 2>&1 | logger "$name"
  
   builder_check_status "$name" "${PIPESTATUS[0]}"
}

builder_remove_static_libraries()
{
  while [ "$#" -gt 0 ]; do
    local library_name="$1"
    shift 1
    rm -f "$prefix/lib/lib$library_name.a"
  done
}

build_make()
{
  local name="$1"
  local target="$2"
  local make_args="$3"
  local include_flags="$4"

  builder_should_run "$name" || return 0

  if [ "$include_flags" ]; then
    make_args="$make_args CFLAGS=\"$CFLAGS\" LDFLAGS=\"$LDFLAGS\""
  fi

  (cd "$name" \
    && sh -c "$MAKE $target $make_args") 2>&1 | logger "$name"
   
  builder_check_status "$name" "${PIPESTATUS[0]}"
}

build_make_install()
{
  local name="$1"
  local prefix="$2"
  local make_args="$3"

  builder_should_run "$name" || return 0

  (cd "$name" \
    && sh -c "$MAKE $make_args CFLAGS=\"$CFLAGS\" LDFLAGS=\"$LDFLAGS\"" \
    && sh -c "$MAKE install $make_args PREFIX=\"$prefix\"") 2>&1 | logger "$name"
  
  builder_check_status "$name" "${PIPESTATUS[0]}"
}

build_npm_local()
{
  local name="$1"
  local prefix="$2"

  builder_should_run "$name" || return 0

  (cd "$name" && unset MAKE &&
    "$prefix/bin/npm" install -g) 2>&1 | logger "$name"
  
  builder_check_status "$name" "${PIPESTATUS[0]}"
}

build_npm_remote()
{
  local name="$1"
  local prefix="$2"

  builder_should_run "$name" || return 0
  ("$prefix/bin/npm" install "$name" -g) 2>&1 | logger "$name"
  
  builder_check_status "$name" "${PIPESTATUS[0]}"
}

build_ant()
{
  local name="$1"
  local prefix="$2"

  builder_should_run "$name" || return 0

  (cd "$name" &&
    sh ./build.sh -Ddist.dir="$prefix/java" dist) 2>&1 | logger "$name"
  
  builder_check_status "$name" "${PIPESTATUS[0]}"
}

build_maven()
{
  local name="$1"
  local prefix="$2"

  builder_should_run "$name" || return 0

  (cd "$name" &&
    yes 'yes' | M2_HOME="$prefix/java" \
        "$prefix/java/bin/ant") 2>&1 | logger "$name"
  
  builder_check_status "$name" "${PIPESTATUS[0]}"
}

build_lucene()
{
  local name="$1"
  local prefix="$2"

  builder_should_run "$name" || return 0

  (cd "$name" &&
    "$prefix/java/bin/ant" ivy-bootstrap \
        -Divy_install_path="$prefix/java/lib" &&
    "$prefix/java/bin/ant" compile jar \
        -lib "$prefix/java/lib" &&
    cp build/core/*.jar "$prefix/java/lib") 2>&1 | logger "$name"
  
  builder_check_status "$name" "${PIPESTATUS[0]}"
}

build_couchdb_lucene()
{
  local name="$1"
  local prefix="$2"

  builder_should_run "$name" || return 0

  (cd "$name" &&
    "$prefix/java/bin/mvn" && mkdir -p 'target/output' && (
	cd 'target/output' && for i in ../couchdb-lucene-*.tar.gz; do
            tar xvzf "$i" && cp -Rv couchdb-lucene-*/* "$prefix/java";
        done
    ); rm -rf 'target/output') 2>&1 | logger "$name"
  
  builder_check_status "$name" "${PIPESTATUS[0]}"
}

build_bzip2()
{
  local name="$1"
  local prefix="$2"

  builder_should_run "$name" || return 0

  ( (cd "$name" &&
     make -f Makefile-libbz2_so &&
     make install PREFIX="$prefix" &&
     cp -P libbz2.so.* "$prefix/lib") &&
    \
    (cd "$prefix/lib" &&
     ln -sf libbz2.so.1.0 libbz2.so.1) ) 2>&1 | logger "$name" 
}

build_cmake()
{
  local name="$1"
  local prefix="$2"
  local cmake_args="$3"

  builder_should_run "$name" || return 0
  cmake_args="$cmake_args -DCMAKE_INSTALL_PREFIX=\"$prefix\""

  (cd "$name" && mkdir build && cd build &&
    cmake $cmake_args .. && make && make install) 2>&1 | logger "$name"
}

builder_clean_target()
{
  local name="$1"
  local prefix="$2"

  builder_should_run "$name" || return 0

  ( (cd "$prefix" &&
     rm -rf Library) &&
    \
    (cd "$prefix/java" &&
      rm -f LICENSE* NOTICE* README* \
        INSTALL* KEYS* WHATSNEW* *.xml) &&
    \
    (cd "$prefix/java/bin" &&
      rm -f runant.p? *.bat *.cmd m2.conf) &&
    \
    (cd "$prefix/lib/erlang/lib" &&
      rm -rf megaco-* wx-* hipe-*) ) 2>&1 | logger "$name"
}

fix_libtool()
{
  for dir in "$@"; do
    (cd "$dir" &&
      libtoolize --automake --copy &&
      aclocal -I config && autoheader &&
      automake --add-missing --copy && autoconf) 2>/dev/null \
	|| fatal "Unable to regenerate libtool files for '$dir'"
  done

  return 0
}

builder_initialize()
{
  run_status_file="`tempfile`"
  last_pkg_file="`tempfile`"
  last_version_file="`tempfile`"

  trap builder_cleanup EXIT
}

builder_check_status()
{
  local name="$1"
  local pipe_status="$2"

  if [ "$pipe_status" -ne 0 ]; then
    echo >&2
    echo "A failure occurred while building '$name':" >&2
    echo "  Subprocess exited with a status code of $pipe_status." >&2
    echo "  Please check the source tree for problems and retry." >&2
    echo >&2
    exit "$pipe_status"
  fi

  true
}

builder_cleanup()
{
  rm -f "$run_status_file" "$last_pkg_file" "$last_version_file"
}

builder_should_run()
{
  local pkg="`echo "$1" | sed 's/\//-/g;'`"
  local version="$2"

  local run_status="`cat "$run_status_file"`"

  local last_pkg="`cat "$last_pkg_file"`"
  local last_version="`cat "$last_version_file"`"

  if [ "$run_status" -eq 0 ]; then
    if [ "$pkg_stop" -a "$last_pkg $last_version" = "$pkg_stop $pkg_stop_version" ]; then
      run_status='1'
      echo -n "$run_status" > "$run_status_file"
    fi
  else
    if [ "$pkg_start" -a "$pkg $version" = "$pkg_start $pkg_start_version" ]; then
      run_status='0'
      echo -n "$run_status" > "$run_status_file"
    fi
  fi;

  echo -n "$pkg" > "$last_pkg_file"
  echo -n "$version" > "$last_version_file"

  return "$run_status"
}

builder_move_libraries()
{
  local name="$1"
  local prefix="$2"
  local dir="$3"

  builder_should_run "$name" || return 0

  (cd "$prefix" &&
    if [ -d "$dir" ]; then \
        mv "$dir"/* lib/ && rmdir "$dir"; fi) 2>&1 | logger "$name"
}

builder_setup_environment()
{
  prefix="$1"
  pkg_start="$2"
  pkg_start_version="$3"
  pkg_stop="$4"
  pkg_stop_version="$5"
  uname="$6"
  cpu="$7"
  bits="$8"
  parallel="$9"

  timestamp="`date +%Y%m%d-%H%M%S`"

  if [ "$pkg_start" ]; then
    echo -n 1 > "$run_status_file"
  else
    echo -n 0 > "$run_status_file"
  fi

  #export MAKE='gmake'
  #export GNUMAKE='gmake'
  export CC='gcc'
  export CXX='g++'
  export MAKE='make'
  export GNUMAKE='make'
  export PATH="$prefix/bin:$PATH"
  export LD_LIBRARY_PATH="$prefix/lib:$LD_LIBRARY_PATH"
  export DYLD_LIBRARY_PATH="$prefix/lib:$DYLD_LIBRARY_PATH"
  export PKG_CONFIG_PATH="$prefix/lib/pkgconfig"

  builder_detect_platform \
    || fatal 'Unsupported platform or architecture; please edit Makefile'

  if [ "$parallel" ]; then
    export MAKE="$MAKE -j$parallel"
  fi

  if [ "$uname" = 'Darwin' -a "$cpu" = 'Intel' -a "$bits" -eq 32 ]; then
    export LDFLAGS="-arch i386 -L$prefix/lib"
  else
    export LDFLAGS="-L$prefix/lib"
    #export LDFLAGS="$LDFLAGS -R$prefix/lib"
  fi

  export CFLAGS_SIMPLE="-Os -m$bits -fstack-protector-all"
  export CFLAGS_INCLUDE="-I$prefix/include -L$prefix/lib"
  #CFLAGS_INCLUDE="$CFLAGS_INCLUDE -R$prefix/lib"

  export CFLAGS="$CFLAGS_SIMPLE $CFLAGS_INCLUDE"
  export CXXFLAGS="$CFLAGS"
}

builder_detect_platform()
{
  # Detect machine word size
  if [ -z "$bits" ]; then
    if [ "`uname -m | grep 64$`" ]; then
      bits='64'
    else
      bits='32'
    fi
  fi

  # Detect architecture/platform
  if [ "$cpu" = 'Intel' ]; then
    if [ "$uname" = 'Darwin' ]; then
        if [ "$bits" -eq 64 ]; then
          build_cpu='x64'
          build_platform="darwin64-x86_64-cc"
          build_arch="x86_64-apple-darwin10.0.0"
          build_extra_options="--enable-darwin-64bit"
        else
          build_cpu='ia32'
          build_platform="darwin-i386-cc"
          build_arch="i386-apple-darwin10.0.0"
          build_extra_options="--enable-darwin-32bit"
        fi
    elif [ "$uname" = 'Linux' ]; then
       if [ "$bits" -eq 64 ]; then
          build_cpu='x64'
          build_platform="linux-elf"
          build_arch="x86_64-linux-gnu"
        else
          build_cpu='ia32'
          build_platform="linux-elf"
          build_arch="i586-linux-gnu"
        fi
    fi
  fi

  if [ -z "$build_cpu" -o -z "$build_arch" -o -z "$build_platform" ]; then
    echo 'Warning: Unable to detect platform/architecture' >&2
    return 1
  fi

  return 0
}


