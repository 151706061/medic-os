#!/bin/bash

self="`readlink -f "$0"`"
base_dir="`dirname "$self"`/.."

fatal()
{
  echo "Fatal error: $*" >&2
  exit 111
}

source "$base_dir/scripts/include/logger" 2>/dev/null &&
source "$base_dir/scripts/include/builder" 2>/dev/null \
    || fatal 'Unable to load a required library'

main()
{
  local prefix="$1"
  local pkg_start="`echo "$2" | sed 's/\//-/g;'`"
  local pkg_start_version="$3"
  local pkg_stop="`echo "$4" | sed 's/\//-/g;'`"
  local pkg_stop_version="$5"
  local arch="$6"
  local bits="$7"
  local parallel="$8"

  check_args "$@" || usage

  # Processor and system options:
  #  These are used by `builder_setup_environment` to set
  #  environment variables and compilation flags appropriately.

  bits="`builder_normalize_bits "$arch" "$bits"`"
  arch="`builder_normalize_architecture "$arch" "$bits"`"

  local uname="`uname -s`"
  local stdarg="--prefix=\"$prefix\""

  # Package-specific options:
  #  These are used to vary configuration based upon
  #  the architecture that we're currently compiling for.

  local erlang_extra_options=""

  if [ "$arch" = 'intel' -a "$bits" ]; then
    erlang_extra_options="--enable-m${bits}-build"
  fi

  builder_initialize &&
  builder_setup_environment "$prefix" \
    "$pkg_start" "$pkg_start_version" "$pkg_stop" \
      "$pkg_stop_version" "$uname" "$arch" "$bits" "$parallel" &&
  \
  build_autoconf 'pv' "$stdarg" &&
  \
  (disable_parallelism && simple_cflags &&
      build_autoconf 'zlib' "--shared $stdarg") &&
  \
  builder_remove_static_libraries 'z' &&
  \
  build_bzip2 'bzip2' "$prefix" &&
  builder_remove_static_libraries 'bz2' &&
  \
  build_autoconf 'libusb' \
    "$stdarg --enable-static=no --enable-shared=yes" &&
  \
  build_autoconf 'libusb-compat' \
    "$stdarg --enable-static=no --enable-shared=yes" &&
  \
  if [ "$build_platform" = 'linux-elf' ]; then

    build_autoconf 'strace' "$stdarg" &&
    build_autoconf 'usbutils' "$stdarg" &&
    \
    build_make 'usb-modeswitch' \
      'install-static' "DESTDIR=\"$prefix\" PREFIX=\"$prefix\"" 'y' &&
    \
    build_make 'usb-modeswitch-data' \
      'install' "DESTDIR=\"$prefix\" PREFIX=\"$prefix\"" &&
    \
    build_autoconf 'attr' \
      "$stdarg --enable-shared=yes --enable-static=no" '' 'install-lib' &&
    \
    build_autoconf 'acl' \
	"$stdarg --enable-shared=yes --enable-static=no" '' 'install-lib' &&
    \
    build_autoconf 'inotify-tools' \
      "$stdarg --enable-shared=yes --enable-static=no" &&
    \
    build_make_install 'paxctl' "$prefix" "DESTDIR=\"$prefix\""

  fi &&
  \
  build_autoconf 'ncurses' "$stdarg --with-shared" &&
  build_autoconf 'popt' "$stdarg --enable-shared --disable-static" &&
  \
  (disable_parallelism && build_make 'logrotate' 'all install' \
    "PREFIX='$prefix' LFS='$CFLAGS' LDFLAGS='$LDFLAGS' BASEDIR=''") &&
  \
  builder_remove_static_libraries 'ncurses' 'ncurses_g' 'form' \
    'form_g' 'menu' 'menu_g' 'ncurses++' 'ncurses_g' 'panel' 'panel_g' &&
  \
  build_autoconf 'lzo' "$stdarg --enable-shared --disable-static" &&
  build_autoconf 'lrzip' "$stdarg" &&
  build_autoconf 'lzma' "$stdarg" &&
  builder_remove_static_libraries 'lzmadec' &&
  build_autoconf 'xdelta' "$stdarg" &&
  \
  build_autoconf 'diffutils' "$stdarg" &&
  build_autoconf 'patch' "$stdarg" &&
  \
  (disable_parallelism && \
    build_config 'openssl' "shared no-asm zlib-dynamic $stdarg") &&
  \
  build_autoconf 'openssh' \
    "$stdarg --sysconfdir=\"$prefix/etc/ssh\" \
     --with-zlib=\"$prefix\" --with-ssl-dir=\"$prefix\"" &&
  \
  builder_remove_static_libraries 'crypto' 'ssl' &&
  \
  build_autoconf 'rsync' "$stdarg" &&
  \
  build_autoconf 'libidn' "$stdarg" &&
  builder_remove_static_libraries 'idn' &&
  \
  (disable_library_path && build_autoconf 'readline' \
    "$stdarg --build=\"$build_arch\" --enable-static=no --enable-shared=yes") &&
  \
  build_autoconf 'curl' \
    "$stdarg --with-ssl=\"$prefix\" \
    --with-zlib=\"$prefix\" --with-libidn=\"$prefix\"" &&
  \
  builder_remove_static_libraries 'curl' &&
  build_autoconf 'icu' "$stdarg" &&
  \
  (simple_cflags && build_autoconf 'node' \
    "$stdarg --shared-zlib \
    --shared-zlib-includes='$prefix/include' \
    --shared-zlib-libpath='$prefix/lib' \
    --shared-openssl \
    --shared-openssl-includes='$prefix/include' \
    --shared-openssl-libpath='$prefix/lib' --dest-cpu='$build_cpu'") &&
  \
  (disable_parallelism &&
    build_autoconf 'js' \
      "$stdarg --host='$build_arch' --with-cpu-arch='$build_cpu'") &&
  \
  builder_move_libraries 'move-libraries' "$prefix" 'lib64' &&
  builder_remove_static_libraries 'js' &&
  \
  build_autoconf 'erlang' \
    "$stdarg $build_extra_options --enable-kernel-poll \
    --enable-dynamic-ssl-lib --enable-shared-zlib='$prefix' \
    --with-ssl='$prefix' $erlang_extra_options" &&
  \
  (disable_parallelism && \
    builder_fix_erlang_dso_linkage "$bits") &&
  \
  build_autoconf 'libffi' "$stdarg" && \
  builder_remove_static_libraries 'ffi' &&
  \
  build_cmake 'gammu' "$prefix" \
    "-DBUILD_SHARED_LIBS=ON -DWITH_Glib=OFF \
     -DINSTALL_GNAPPLET=OFF -DWITH_BACKUP=OFF \
     -DINSTALL_BASH_COMPLETION=OFF -DENABLE_PROTECTION=ON" &&
  \
  build_make_install 'gammu-json' "$prefix" "PREFIX=\"$prefix\"" &&
  \
  build_autoconf 'couchdb' \
    "$stdarg --with-js-lib-name=mozjs185 \
      --with-erlang='$prefix/lib/erlang/usr/include' \
      --with-js-include='$prefix/include/js' --with-js-lib='$prefix/lib'" &&
  \
  build_make_install 'nodeunit' "$prefix" &&
  build_make_install 'nodelint' "$prefix" &&
  \
  if [ "`build_version 'node' 2`" -ge 10 ]; then
    build_npm_remote 'node-gyp' "$prefix"
  fi &&
  \
  build_npm_remote 'kanso' "$prefix" &&
  build_npm_local 'node-fs-ext' "$prefix" &&
  build_npm_local 'node-gammu-json' "$prefix" &&
  \
  build_ant 'ant' "$prefix" &&
  build_maven 'maven' "$prefix" &&
  build_lucene 'lucene' "$prefix" &&
  build_couchdb_lucene 'couchdb-lucene' "$prefix" &&
  \
  builder_clean_target 'clean-target' "$prefix"

  if [ "$?" -ne 0 ]; then
    fatal 'One or more build steps failed; aborting'
  fi

  return 0
}

fatal()
{
  echo "$0: fatal: $*" >&2
  exit 1
}

check_args()
{
  local prefix="$1"

  [ -d "$prefix" ] 
}

usage()
{
  echo
  echo "Usage:" >&2
  echo "  $0 root-directory" >&2
  echo

  exit 111
}

main "$@"
exit $?

