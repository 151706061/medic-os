#!/bin/bash

self="`readlink -f "$0"`"
base_dir="`dirname "$self"`/../../medic-core/"

source "$base_dir/scripts/include/logger" 3>/dev/null &&
source "$base_dir/scripts/include/builder" 2>/dev/null \
    || fatal 'Unable to load a required library'

main()
{
  local prefix="$1"
  local pkg_start="`echo "$2" | sed 's/\//-/g;'`"
  local pkg_start_version="$3"
  local pkg_stop="`echo "$4" | sed 's/\//-/g;'`"
  local pkg_stop_version="$5"
  local bits="$6"
  local parallel="$7"
  local kernel_version="$8"
  local kernel_module_path="`readlink -f "$9"`"

  check_args "$@" || usage

  local cpu='Intel'
  local uname="`uname -s`"
  local stdarg="--prefix=\"$prefix\""

  builder_initialize &&
  builder_setup_environment "$prefix" \
    "$pkg_start" "$pkg_start_version" "$pkg_stop" \
      "$pkg_stop_version" "$uname" "$cpu" "$bits" "$parallel" &&
  \
  build_autoconf 'pv' "$stdarg" &&
  build_autoconf 'zlib' "$stdarg" &&
  builder_remove_static_libraries 'z' &&
  build_autoconf 'libffi' "$stdarg" &&
  builder_remove_static_libraries 'ffi' &&
  build_autoconf 'glib' "$stdarg" &&
  \
  build_autoconf 'open-vm-tools' \
    "$stdarg --with-kernel-release='$kernel_version' \
     --with-linuxdir='$kernel_module_path' \
     --without-x --without-gtk2 --without-pam \
     --without-procps --without-icu --without-dnet"

  if [ "$?" -ne 0 ]; then
    fatal 'One or more build steps failed; aborting'
  fi

  return 0
}

fatal()
{
  echo "$0: fatal: $*" >&2
  exit 1
}

check_args()
{
  local prefix="$1"

  [ -d "$prefix" ] 
}

usage()
{
  echo
  echo "Usage:" >&2
  echo "  $0 root-directory" >&2
  echo

  exit 111
}

main "$@"
exit $?

