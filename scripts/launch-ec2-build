#!/bin/sh

fatal() {

  echo >&2
  echo "Fatal: $@" >&2
  exit 111
}

usage() {

  local app="`basename "$0"`"
  echo "Usage: $app settings_path [ platform [ instance_type ] ]" >&2
  exit 1
}

ssh_command() {

  local host="$1"
  local identity="$2"
  local remote_command="$3"

  ssh -o StrictHostKeyChecking=no -o RequestTTY=yes \
    -i "$identity" "$host" "$remote_command"

  return "$?"
}

main() {

  local settings="$1"
  local platform="$2"
  local instance_type="$3"

  local security_group='basic'
  local time_zone='America/Los_Angeles'
  local ssh_key_name="Nightly Build Key"
  local default_availability_zone='us-west-2a'
  local mmva_url='https://scri.pt/get/mmva'
  local vm_url='https://github.com/browndav/vm-toaster'

  if [ -z "$settings" -o $# -gt 3 ]; then
    usage
  fi

  if [ -z "$platform" ]; then
    platform='x64'
  fi

  if [ -z "$instance_type" ]; then
    instance_type='m1.small'
  fi

  local ami='';
  local ssh_private_key_path='';
  local ssh_private_key_contents='';

  case "$platform" in
    x64)
      ami='ami-be1c848e' ;;
    x86)
      ami='ami-4c1c847c' ;;
  esac

  if [ "$time_zone" ]; then
    export TZ="$time_zone"
  fi

  if [ "$settings" ]; then
    source "$settings" \
      || fatal "Couldn't load settings data from '$settings'"

    settings="`cat "$settings"`" \
      || fatal "Couldn't read settings data from '$settings'"
  fi

  if [ "$SSH_PRIVATE_KEY" ]; then
    ssh_private_key_path="$SSH_PRIVATE_KEY"
    ssh_private_key_contents="`cat "$ssh_private_key_path"`" \
      || fatal "Couldn't read private key from '$ssh_private_key_path'"
  fi

  if [ -z "$EC2_AVAILABILITY_ZONE" ]; then
    EC2_AVAILABILITY_ZONE="$default_availability_zone"
  fi

  local n='15'
  local tab="`printf '\t'`"

  echo -n 'Creating instance... ' >&2

  local instance_data="`
    ec2-run-instances "$ami" -t "$instance_type" \
      -k "$ssh_key_name" -z "$EC2_AVAILABILITY_ZONE" -g "$security_group"
  `" &&
  \
  local instance_id="`
    echo "$instance_data" | grep ^INSTANCE | cut -d"$tab" -f2
  `"

  if [ -z "$instance_id" ]; then
    echo 'failed.' >&2
    fatal 'Failed to create instance'
  fi

  ec2-create-tags "$instance_id" \
    --tag Name="Nightly Build: MMVA on `date +'%Y-%m-%d at %l:%M%P'`" \
    --tag Platform="Amazon Linux" --tag Environment="$platform" \
    --tag User="browndav" &>/dev/null && \
  \
  echo "done." >&2
  echo "Instance identifier: $instance_id"
  echo -n 'Discovering fully-qualified domain name... ' >&2
  \
  while [ -z "$external_fqdn" -a "$n" -gt 0 ]; do
    sleep 5 && n=$[$n - 1]
    local describe_data="`
      ec2-describe-instances "$instance_id" | grep ^PRIVATEIPADDRESS 
    `" &&
    local external_fqdn="`
      echo "$describe_data" | cut -d"$tab" -f4
    `"
  done

  if [ -z "$external_fqdn" ]; then
    echo 'failed.' >&2
    fatal 'Unable to discover host name for new instance'
  fi

  echo "done." >&2
  echo "Instance name: $external_fqdn"
  echo -n 'Waiting for instance to start... ' >&2

  n='12'
  local rv='0'
  local ssh_id="$ssh_private_key_path"
  local ssh_host="ec2-user@$external_fqdn"

  while [ "$n" -gt 0 ]; do

    sleep 10 && n=$[n - 1]

    ssh_command "$ssh_host" "$ssh_id" \
      'mkdir -p mmva-src/vm-toaster/config/aws-current .ssh' &&
    \
    echo 'done.' >&2 &&
    echo -n 'Establishing connection to instance... ' >&2 &&
    \
    echo "$settings" | ssh_command  "$ssh_host" "$ssh_id" \
      'cat > mmva-src/vm-toaster/config/aws-current/settings' && \
    \
    echo "$ssh_private_key_contents" \
      | ssh_command  "$ssh_host" "$ssh_id" 'cat >> .ssh/id_rsa' && \
    \
    ssh_command  "$ssh_host" "$ssh_id" \
      "echo 'done.' >&2 &&
         echo 'Connection established successfully.' >&2 &&
         echo -n 'Setting up environment... ' >&2 &&
         \
         export TZ='$time_zone' &&
         source mmva-src/vm-toaster/config/aws-current/settings &&
         echo 'done.' >&2 &&
         \
         echo -n 'Updating system packages... ' >&2 &&
         sudo yum -q -y update &>/dev/null &&
         echo 'done.' >&2 &&
         \
         echo 'Downloading MMVA core:' >&2 &&
         curl -O# '$mmva_url/mmva-core-src-current.tar.xz' &&
         echo 'Downloading MMVA JDK/JRE module:' >&2 &&
         curl -O# '$mmva_url/mmva-java-$platform-current.tar.xz' &&
         echo -n 'Extracting MMVA core image... ' >&2 &&
         sudo tar xJf mmva-core-src-current.tar.xz &&
         echo 'done.' >&2 &&
         \
         echo -n 'Extracting MMVA JDK/JRE module... ' >&2 &&
         sudo tar xJf 'mmva-java-$platform-current.tar.xz' &&
         echo 'done.' >&2 &&
         cd mmva-src &&
         sudo ln -nsf '$platform' java-current/selected &&
         \
         echo -n 'Installing build-time dependencies... ' >&2 &&
         sudo ./vm-toaster/config/redhat/scripts/yum-install \
           -q -y &>/dev/null &&
         echo 'done.' >&2 &&
         \
         echo -n 'Applying latest MMVA updates... ' >&2 &&
         (cd vm-toaster &&
           sudo git remote set-url origin "$vm_url" &&
           sudo git stash -q && sudo git pull -q) &&
         echo 'done.' >&2 &&
         \
         echo 'Starting MMVA build process:' >&2 &&
         sudo JAVA_HOME="\$JAVA_HOME" make all PLATFORM='$platform' &&
         echo 'MMVA build complete.' >&2 &&
         \
         echo -n 'Building EBS images:' >&2 &&
         ./vm-toaster/scripts/build-ebs-image \
           '$platform' 'output/image-$platform-xen' \
           'MMVA $platform - `date +%Y%m%d`' /dev/sdb \
         \
         echo 'EBS images built successfully.' >&2 &&
         echo 'Uploading ISO images:' >&2 &&
         ./vm-toaster/scripts/upload-iso-images \
           "$UPLOAD_METHOD" "$UPLOAD_USER" \
             "$UPLOAD_HOST" "$UPLOAD_TARGET" "$UPLOAD_OPTIONS" && \
         \
         echo 'ISO images uploaded successfully.'"

    rv="$?"

    if [ "$rv" -ne 0 -a "$rv" -ne 255 ]; then
      echo 'failed.' >&2
      fatal 'Remote build process failed'
    fi
  done

  if [ "$rv" -eq 255 ]; then
    fatal 'Failed to connect to instance; timeout exceeded'
  fi

  return 0
}

main "$@"
exit "$?"

