#!/bin/sh

fatal() {
  echo >&2
  echo "Fatal: $@" >&2
  exit 111
}

main() {

  local settings="$1"
  local platform="$2"
  local instance_type="$3"

  local ami='';
  local security_group='basic'
  local time_zone='America/Los_Angeles'
  local ssh_key_name="Nightly Build Key"
  local mmva_url_base='https://scri.pt/get/mmva'

  if [ -z "$platform" ]; then
    platform='x64'
  fi

  if [ -z "$instance_type" ]; then
    instance_type='m1.small'
  fi

  case "$platform" in
    x64)
      ami='ami-be1c848e' ;;
    x86)
      ami='ami-4c1c847c' ;;
  esac

  if [ -z "$EC2_AVAILABILITY_ZONE" ]; then
    EC2_AVAILABILITY_ZONE='us-west-2a'
  fi

  if [ "$time_zone" ]; then
    export TZ="$time_zone"
  fi

  if [ "$settings" ]; then
    source "$settings" \
      || fatal "Couldn't read settings data from '$settings'"

    settings="`cat "$settings"`"
  fi
  
  local n='15'
  local tab="`printf '\t'`"

  echo -n 'Creating instance... ' >&2

  local instance_data="`
    ec2-run-instances "$ami" -t "$instance_type" \
      -k "$ssh_key_name" -z "$EC2_AVAILABILITY_ZONE" -g "$security_group"
  `" &&
  \
  local instance_id="`
    echo "$instance_data" | grep ^INSTANCE | cut -d"$tab" -f2
  `"

  if [ -z "$instance_id" ]; then
    echo 'failed.' >&2
    fatal 'Failed to create instance'
  fi

  ec2-create-tags "$instance_id" \
    --tag Name="Nightly Build: MMVA on `date +'%Y-%m-%d at %l:%M%P'`" \
    --tag Platform="Amazon Linux" --tag Environment="$platform" \
    --tag User="browndav" &>/dev/null && \
  \
  echo "done." >&2
  echo "Instance identifier: $instance_id"
  echo -n 'Discovering fully-qualified domain name... ' >&2
  \
  while [ -z "$external_fqdn" -a "$n" -gt 0 ]; do
    sleep 5 && n=$[$n - 1]
    local describe_data="`
      ec2-describe-instances "$instance_id" | grep ^PRIVATEIPADDRESS 
    `" &&
    local external_fqdn="`
      echo "$describe_data" | cut -d"$tab" -f4
    `"
  done

  if [ -z "$external_fqdn" ]; then
    echo 'failed.' >&2
    fatal 'Unable to discover host name for new instance'
  fi

  echo "done." >&2
  echo "Instance name: $external_fqdn"
  echo -n 'Waiting for instance to start... ' >&2

  n='30'

  while [ "$n" -gt 0 ]; do
    sleep 5 && n=$[n - 1]

    ssh -q -o StrictHostKeyChecking=no -o RequestTTY=yes \
      ec2-user@"$external_fqdn" \
        "echo 'done.' >&2 &&
           echo 'Connection established successfully.' >&2 &&
           echo -n 'Setting up environment... ' >&2 &&
           export TZ='$time_zone' &&
           echo "$settings" > ~/settings && source ~/settings &&
           echo 'done.' >&2 &&
           echo -n 'Updating system packages... ' >&2 &&
           sudo yum -q -y update &>/dev/null &&
           echo 'done.' >&2 &&
           echo 'Downloading MMVA core:' >&2 &&
           curl -O# '$mmva_url_base/mmva-core-src-current.tar.xz' &&
           echo 'Downloading MMVA JDK/JRE module:' >&2 &&
           curl -O# '$mmva_url_base/mmva-java-$platform-current.tar.xz' &&
           echo -n 'Extracting MMVA core image... ' >&2 &&
           sudo tar xJf mmva-core-src-current.tar.xz &&
           echo 'done.' >&2 &&
           echo -n 'Extracting MMVA JDK/JRE module... ' >&2 &&
           sudo tar xJf 'mmva-java-$platform-current.tar.xz' &&
           echo 'done.' >&2 && cd mmva-src &&
           sudo ln -nsf '$platform' java-current/selected &&
           echo -n 'Installing build-time dependencies... ' >&2 &&
           sudo ./vm-toaster/config/redhat/scripts/yum-install \
             -q -y &>/dev/null &&
           echo 'done.' >&2 &&
           echo -n 'Applying latest MMVA updates... ' >&2 &&
           (cd vm-toaster && sudo git remote set-url origin \
             https://github.com/browndav/vm-toaster && sudo git pull -q) &&
           echo 'done.' >&2 &&
           echo 'Starting MMVA build process.' >&2 &&
           source .profile &&
           sudo JAVA_HOME="\$JAVA_HOME" \
             make all PLATFORM='$platform' &&
           echo 'done.' >&2 &&
           echo -n 'Building elastic block store images... ' >&2 &&
           sudo vm-toaster/scripts/build-ebs-image \
             'output/image-$platform-xen' \
             'MMVA $platform - `date +%Y%m%d`' /dev/sdb &&
           echo 'done.' >&2"

    if [ "$?" -ne 255 ]; then
      echo 'failed.' >&2
      fatal 'Remote build process failed'
    fi
  done

  fatal 'Failed to connect to instance; timeout exceeded'
}

main "$@"

